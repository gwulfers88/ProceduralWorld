#extension GL_NV_gpu_shader5 : enable
// Tessellation Evaluation Code
layout (quads, fractional_odd_spacing) in;

uniform sampler2D tex_displacement;

uniform mat4 view_matrix;
uniform mat4 mv_matrix;
uniform mat4 proj_matrix;
uniform float dmap_depth;

in TCS_OUT
{
	vec2 tc;
} tes_in[];

out TES_OUT
{
	vec2 tc;
	vec3 world_coord;
	vec3 eye_coord;
	vec3 normal;
	vec3 lightDir;
} tes_out;


// not same permutation table as Perlin's reference to avoid copyright issues;
// Perlin's table can be found at http://mrl.nyu.edu/~perlin/noise/
// @OPTIMIZE: should this be unsigned char instead of int for cache?
int stbPerlinRandtab[512] =
{
	23, 125, 161, 52, 103, 117, 70, 37, 247, 101, 203, 169, 124, 126, 44, 123,
	152, 238, 145, 45, 171, 114, 253, 10, 192, 136, 4, 157, 249, 30, 35, 72,
	175, 63, 77, 90, 181, 16, 96, 111, 133, 104, 75, 162, 93, 56, 66, 240,
	8, 50, 84, 229, 49, 210, 173, 239, 141, 1, 87, 18, 2, 198, 143, 57,
	225, 160, 58, 217, 168, 206, 245, 204, 199, 6, 73, 60, 20, 230, 211, 233,
	94, 200, 88, 9, 74, 155, 33, 15, 219, 130, 226, 202, 83, 236, 42, 172,
	165, 218, 55, 222, 46, 107, 98, 154, 109, 67, 196, 178, 127, 158, 13, 243,
	65, 79, 166, 248, 25, 224, 115, 80, 68, 51, 184, 128, 232, 208, 151, 122,
	26, 212, 105, 43, 179, 213, 235, 148, 146, 89, 14, 195, 28, 78, 112, 76,
	250, 47, 24, 251, 140, 108, 186, 190, 228, 170, 183, 139, 39, 188, 244, 246,
	132, 48, 119, 144, 180, 138, 134, 193, 82, 182, 120, 121, 86, 220, 209, 3,
	91, 241, 149, 85, 205, 150, 113, 216, 31, 100, 41, 164, 177, 214, 153, 231,
	38, 71, 185, 174, 97, 201, 29, 95, 7, 92, 54, 254, 191, 118, 34, 221,
	131, 11, 163, 99, 234, 81, 227, 147, 156, 176, 17, 142, 69, 12, 110, 62,
	27, 255, 0, 194, 59, 116, 242, 252, 19, 21, 187, 53, 207, 129, 64, 135,
	61, 40, 167, 237, 102, 223, 106, 159, 197, 189, 215, 137, 36, 32, 22, 5,

	// and a second copy so we don't need an extra mask or static initializer
	23, 125, 161, 52, 103, 117, 70, 37, 247, 101, 203, 169, 124, 126, 44, 123,
	152, 238, 145, 45, 171, 114, 253, 10, 192, 136, 4, 157, 249, 30, 35, 72,
	175, 63, 77, 90, 181, 16, 96, 111, 133, 104, 75, 162, 93, 56, 66, 240,
	8, 50, 84, 229, 49, 210, 173, 239, 141, 1, 87, 18, 2, 198, 143, 57,
	225, 160, 58, 217, 168, 206, 245, 204, 199, 6, 73, 60, 20, 230, 211, 233,
	94, 200, 88, 9, 74, 155, 33, 15, 219, 130, 226, 202, 83, 236, 42, 172,
	165, 218, 55, 222, 46, 107, 98, 154, 109, 67, 196, 178, 127, 158, 13, 243,
	65, 79, 166, 248, 25, 224, 115, 80, 68, 51, 184, 128, 232, 208, 151, 122,
	26, 212, 105, 43, 179, 213, 235, 148, 146, 89, 14, 195, 28, 78, 112, 76,
	250, 47, 24, 251, 140, 108, 186, 190, 228, 170, 183, 139, 39, 188, 244, 246,
	132, 48, 119, 144, 180, 138, 134, 193, 82, 182, 120, 121, 86, 220, 209, 3,
	91, 241, 149, 85, 205, 150, 113, 216, 31, 100, 41, 164, 177, 214, 153, 231,
	38, 71, 185, 174, 97, 201, 29, 95, 7, 92, 54, 254, 191, 118, 34, 221,
	131, 11, 163, 99, 234, 81, 227, 147, 156, 176, 17, 142, 69, 12, 110, 62,
	27, 255, 0, 194, 59, 116, 242, 252, 19, 21, 187, 53, 207, 129, 64, 135,
	61, 40, 167, 237, 102, 223, 106, 159, 197, 189, 215, 137, 36, 32, 22, 5,
};

float stbPerlinLerp(float a, float b, float t)
{
	return a + (b - a) * t;
}

int stbPerlinFastfloor(float a)
{
	int ai = (int)a;
	return (a < ai) ? ai - 1 : ai;
}

// different grad function from Perlin's, but easy to modify to match reference
float stbPerlinGrad(int hash, float x, float y, float z)
{
	float basis[12][3] =
	{
		{ 1, 1, 0 },
		{ -1, 1, 0 },
		{ 1,-1, 0 },
		{ -1,-1, 0 },
		{ 1, 0, 1 },
		{ -1, 0, 1 },
		{ 1, 0,-1 },
		{ -1, 0,-1 },
		{ 0, 1, 1 },
		{ 0,-1, 1 },
		{ 0, 1,-1 },
		{ 0,-1,-1 },
	};

	// perlin's gradient has 12 cases so some get used 1/16th of the time
	// and some 2/16ths. We reduce bias by changing those fractions
	// to 5/64ths and 6/64ths, and the same 4 cases get the extra weight.
	int indices[] =
	{
		0,1,2,3,4,5,6,7,8,9,10,11,
		0,9,1,11,
		0,1,2,3,4,5,6,7,8,9,10,11,
		0,1,2,3,4,5,6,7,8,9,10,11,
		0,1,2,3,4,5,6,7,8,9,10,11,
		0,1,2,3,4,5,6,7,8,9,10,11,
	};

	// if you use reference permutation table, change 63 below to 15 to match reference
	// (this is why the ordering of the table above is funky)
	float grad[] = basis[indices[hash & 63]];
	return grad[0] * x + grad[1] * y + grad[2] * z;
}

float stbPerlinNoise3(float x, float y, float z, int x_wrap, int y_wrap, int z_wrap)
{
	float u, v, w;
	float n000, n001, n010, n011, n100, n101, n110, n111;
	float n00, n01, n10, n11;
	float n0, n1;

	unsigned int x_mask = (x_wrap - 1) & 255;
	unsigned int y_mask = (y_wrap - 1) & 255;
	unsigned int z_mask = (z_wrap - 1) & 255;
	int px = stbPerlinFastfloor(x);
	int py = stbPerlinFastfloor(y);
	int pz = stbPerlinFastfloor(z);
	int x0 = px & (int)x_mask, x1 = (px + 1) & (int)x_mask;
	int y0 = py & (int)y_mask, y1 = (py + 1) & (int)y_mask;
	int z0 = pz & (int)z_mask, z1 = (pz + 1) & (int)z_mask;
	int r0, r1, r00, r01, r10, r11;

#define stbPerlinEase(a)   (((a*6-15)*a + 10) * a * a * a)

	x -= px; u = stbPerlinEase(x);
	y -= py; v = stbPerlinEase(y);
	z -= pz; w = stbPerlinEase(z);

	r0 = (int)stbPerlinRandtab[x0];
	r1 = (int)stbPerlinRandtab[x1];

	r00 = (int)stbPerlinRandtab[r0 + y0];
	r01 = (int)stbPerlinRandtab[r0 + y1];
	r10 = (int)stbPerlinRandtab[r1 + y0];
	r11 = (int)stbPerlinRandtab[r1 + y1];

	n000 = stbPerlinGrad((int)stbPerlinRandtab[r00 + z0], x, y, z);
	n001 = stbPerlinGrad((int)stbPerlinRandtab[r00 + z1], x, y, z - 1);
	n010 = stbPerlinGrad((int)stbPerlinRandtab[r01 + z0], x, y - 1, z);
	n011 = stbPerlinGrad((int)stbPerlinRandtab[r01 + z1], x, y - 1, z - 1);
	n100 = stbPerlinGrad((int)stbPerlinRandtab[r10 + z0], x - 1, y, z);
	n101 = stbPerlinGrad((int)stbPerlinRandtab[r10 + z1], x - 1, y, z - 1);
	n110 = stbPerlinGrad((int)stbPerlinRandtab[r11 + z0], x - 1, y - 1, z);
	n111 = stbPerlinGrad((int)stbPerlinRandtab[r11 + z1], x - 1, y - 1, z - 1);

	n00 = stbPerlinLerp(n000, n001, w);
	n01 = stbPerlinLerp(n010, n011, w);
	n10 = stbPerlinLerp(n100, n101, w);
	n11 = stbPerlinLerp(n110, n111, w);

	n0 = stbPerlinLerp(n00, n01, v);
	n1 = stbPerlinLerp(n10, n11, v);

	return stbPerlinLerp(n0, n1, u);
}

float stbPerlinFbmNoise3(float x, float y, float z, float lacunarity, float gain, int octaves, int x_wrap, int y_wrap, int z_wrap)
{
	int i;
	float frequency = 1.0f;
	float amplitude = 1.0f;
	float sum = 0.0f;

	for (i = 0; i < octaves; i++) {
		sum += stbPerlinNoise3(x*frequency, y*frequency, z*frequency, x_wrap, y_wrap, z_wrap)*amplitude;
		frequency *= lacunarity;
		amplitude *= gain;
	}
	return sum;
}

void main(void)
{
	int MAXINT32 = 0x0FFF;
	int Octaves = 5;
	float Persistance = 0.55f;
	float Lacunarity = 2.0f;
	float NoiseScale = 100;
	float NoiseScaleInv = 1.0f / NoiseScale;

	vec2 tc1 = mix(tes_in[0].tc, tes_in[1].tc, gl_TessCoord.x);
	vec2 tc2 = mix(tes_in[2].tc, tes_in[3].tc, gl_TessCoord.x);
	vec2 tc = mix(tc2, tc1, gl_TessCoord.y);

	vec4 p1 = mix(gl_in[0].gl_Position, gl_in[1].gl_Position, gl_TessCoord.x);
	vec4 p2 = mix(gl_in[2].gl_Position, gl_in[3].gl_Position, gl_TessCoord.x);
	vec4 p = mix(p2, p1, gl_TessCoord.y);
	
	float Sample = stbPerlinFbmNoise3((p.x) * NoiseScaleInv, (p.y) * NoiseScaleInv, (p.z) * NoiseScaleInv, Lacunarity, Persistance, Octaves, MAXINT32, MAXINT32, MAXINT32);
	Sample += stbPerlinFbmNoise3((p.x) * NoiseScaleInv, (p.y) * NoiseScaleInv, (p.z) * NoiseScaleInv, Lacunarity, Persistance, Octaves, MAXINT32, MAXINT32, MAXINT32) / 4;
	Sample = abs(Sample);
	
	p.y += Sample * dmap_depth; //texture(tex_displacement, tc).r 

	float hL = gl_in[0].gl_Position.y;
	float hR = gl_in[1].gl_Position.y;
	float hD = gl_in[2].gl_Position.y;
	float hU = gl_in[3].gl_Position.y;

	vec3 normal = normalize(vec3(hL - hR, 1.0, hD - hU));

	vec4 P_eye = mv_matrix * p;

	tes_out.tc = tc;
	tes_out.world_coord = p.xyz;
	tes_out.eye_coord = P_eye.xyz;
	mat4 n_matrix = transpose(inverse(view_matrix));
	tes_out.normal = vec3(n_matrix * vec4(normal, 0.0));
	tes_out.lightDir = vec3(view_matrix * vec4(0, 100.0f, 0, 0));
	gl_Position = proj_matrix * P_eye;
}